version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.1.0
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "Reverting Database  ########### "
            SUCCESS=$(curl --insecure https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/migration_<<parameters.workflow_id>>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan the Backend
          command: |
            cd backend
            npm update
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            
            cat .circleci/ansible/inventory.txt

      - run:
          name: Fetch and save Backend URL
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo Backend IP: $BACKEND_IP
            curl https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/${CIRCLE_WORKFLOW_ID:0:7} -d $BACKEND_IP
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["08:ba:54:4e:a3:e9:1f:91:cf:34:4f:bb:e2:de:a5:c1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add ansible openssh-client tar unzip
            apk add --update ansible openssh-client tar unzip
            cat .circleci/ansible/inventory.txt

      - run:
          name: Install AWS-CLI for Ansible
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli

      - run:
          name: Configure server
          command: |
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send Migration status to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            cd backend
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              SUCCESS=$(curl https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1')
              echo "MIGRATION WAS SUCCESSFUL"
            else
              SUCCESS=$(curl https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '0')
              echo "MIGRATION FAILED"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install tar/gzip utility
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm aws-cli

  #     - run:
  #         name: Install System Dependencies
  #         command: |
  #           cd frontend
  #           curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
  #           yum -y install nodejs
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Get backend url and Deploy Frontend Object
  #         command: |
  #           export BACKEND_IP=$(curl --insecure https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/${CIRCLE_WORKFLOW_ID:0:7})
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env 

  #     - run:
  #         name: Deploy Frontend Object
  #         command: |
  #           cd frontend
  #           cat .env
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: python:3.7-alpine
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["08:ba:54:4e:a3:e9:1f:91:cf:34:4f:bb:e2:de:a5:c1"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         working_directory: /tmp
  #         command: |
  #           apk add --update ansible curl rsync openssh nodejs npm
  #           ansible --version
  #           pip install awscli
  #           aws --version
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm i
  #           npm run build
  #           cp package* ./dist
  #           cd ..
  #           # Zip the directory
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i ./inventory.txt ./deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["08:ba:54:4e:a3:e9:1f:91:cf:34:4f:bb:e2:de:a5:c1"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i ./inventory.txt ./deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk upgrade
            apk update
            apk add --update unzip curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and Backend Smoke Test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then 
              echo "Smoke Test was Successful"
              return 0
            else
              echo "Smoke Test Failed"
              return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum update -y
            yum install -y curl
            aws --version
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
  
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            
            curl https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/${CIRCLE_WORKFLOW_ID:0:7} -d $OldWorkflowID

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            OldWorkflowID=$(curl --insecure https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/${CIRCLE_WORKFLOW_ID:0:7})
            echo OldWorkflowID: $OldWorkflowID
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}
            # Fetch the stack names
            aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text >> ~/stacks.txt
            echo Stack names: $(cat ~/stacks.txt)
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl --insecure https://kvdb.io/63vbmnEzTac6vpR5QLJMK9/${CIRCLE_WORKFLOW_ID:0:7})
            Stacks=$(cat ~/stacks.txt)
            echo OldWorkflowID: $OldWorkflowID
            echo Stack names: ${Stacks[@]}
            if [[ "${Stacks[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Destroying environment: ${OldWorkflowID}"
              if echo $Stacks | grep -q "udapeople-backend-${OldWorkflowID}"
              then
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              fi
              if echo $Stacks | grep -q "udapeople-frontend-${OldWorkflowID}"
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"

              fi
            else
              echo "--------------- Error in the Cleanup ---------------"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]